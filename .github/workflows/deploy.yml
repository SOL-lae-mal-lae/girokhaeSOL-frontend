name: Deploy Frontend to EC2

on:
    pull_request:
        branches:
            - develop
jobs:
    deploy:
        runs-on: ubuntu-latest # GitHub Actions 러너 환경

        steps:
            - name: Checkout Code
              uses: actions/checkout@v4 # main 브랜치의 최신 코드 체크아웃

            - name: Setup Node.js 22
              uses: actions/setup-node@v4
              with:
                  node-version: '22' # Node.js 22 버전 사용

            - name: Setup pnpm 10
              uses: pnpm/action-setup@v4
              with:
                  version: 10 # pnpm 10 버전 사용

            - name: Get pnpm store directory
              shell: bash
              run: |
                  # pnpm 스토어 디렉토리 경로를 환경 변수에 저장 (캐싱을 위함)
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }} # pnpm 스토어 경로 캐싱
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }} # OS와 lock 파일 해시 기반 키
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store- # 복원 키

            - name: Install dependencies
              run: pnpm install # pnpm을 사용하여 의존성 설치

            - name: Build application
              run: pnpm build # Next.js 애플리케이션 빌드
              env:
                  NODE_ENV: production # 프로덕션 환경으로 빌드
                  NEXT_PUBLIC_CLIENT_API_URL: ${{ secrets.NEXT_PUBLIC_CLIENT_API_URL }}
                  NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
                  CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
                  NEXT_PUBLIC_SIGN_IN_URL: ${{ secrets.NEXT_PUBLIC_SIGN_IN_URL }}
                  NEXT_PUBLIC_SIGN_UP_URL: ${{ secrets.NEXT_PUBLIC_SIGN_UP_URL }}
                  DB_URL: ${{ secrets.DB_URL }}
                  DB_HOST: ${{ secrets.DB_HOST }}
                  DB_PORT: ${{ secrets.DB_PORT }}
                  DB_USER: ${{ secrets.DB_USER }}
                  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
                  DB_NAME: ${{ secrets.DB_NAME }}

            - name: Setup SSH
              uses: webfactory/ssh-agent@v0.9.0
              with:
                  ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

            - name: Add EC2 to known hosts
              run: |
                  mkdir -p ~/.ssh
                  ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
                  chmod 600 ~/.ssh/known_hosts # 권한 설정

            - name: Deploy to EC2
              env:
                  EC2_USER: ${{ secrets.EC2_USER }}
                  EC2_HOST: ${{ secrets.EC2_HOST }}
                  EC2_APP_PATH: /home/${{ secrets.EC2_USER }}/girokhaeSOL/frontend
              run: |
                  echo "Starting deployment to EC2..."

                  # 1. 빌드 결과물 및 필요한 파일들을 하나의 tar.gz 파일로 압축
                  # node_modules는 빌드 후 생성되므로 포함해야 함.
                  # next.config.mjs, ecosystem.config.js는 Next.js 및 PM2 설정 파일
                  tar -czf deploy.tar.gz \
                    .next \
                    node_modules \
                    public \
                    package.json \
                    pnpm-lock.yaml \
                    next.config.ts \
                    deploy.sh \

                    # 2. 압축된 파일을 EC2의 배포 폴더로 전송
                    # ssh-agent에 키가 추가되었으므로 -i 옵션은 필요 없지만, 사용자 예시에 따라 명시적으로 지정
                    scp -o StrictHostKeyChecking=no deploy.tar.gz ${EC2_USER}@${EC2_HOST}:${EC2_APP_PATH}/
                    
                    # 3. EC2에 SSH로 접속하여 deploy.sh 스크립트 실행
                    # 환경 변수들을 `ssh` 명령을 통해 원격 쉘 세션으로 전달
                    ssh -o StrictHostKeyChecking=no \
                      ${EC2_USER}@${EC2_HOST} \
                      "cd ${EC2_APP_PATH} && cd ${EC2_APP_PATH} && chmod +x deploy.sh && ./deploy.sh"
                        
                      
                    echo "Deployment to EC2 initiated. Check EC2 logs for full status."
